// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ozoncp/ocp-note-api/core/repo (interfaces: Repo)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	note "github.com/ozoncp/ocp-note-api/core/note"
)

// MockRepo is a mock of Repo interface.
type MockRepo struct {
	ctrl     *gomock.Controller
	recorder *MockRepoMockRecorder
}

// MockRepoMockRecorder is the mock recorder for MockRepo.
type MockRepoMockRecorder struct {
	mock *MockRepo
}

// NewMockRepo creates a new mock instance.
func NewMockRepo(ctrl *gomock.Controller) *MockRepo {
	mock := &MockRepo{ctrl: ctrl}
	mock.recorder = &MockRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepo) EXPECT() *MockRepoMockRecorder {
	return m.recorder
}

// AddNote mocks base method.
func (m *MockRepo) AddNote(arg0 context.Context, arg1 *note.Note) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddNote", arg0, arg1)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddNote indicates an expected call of AddNote.
func (mr *MockRepoMockRecorder) AddNote(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNote", reflect.TypeOf((*MockRepo)(nil).AddNote), arg0, arg1)
}

// AddNotes mocks base method.
func (m *MockRepo) AddNotes(arg0 context.Context, arg1 []note.Note) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddNotes", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddNotes indicates an expected call of AddNotes.
func (mr *MockRepoMockRecorder) AddNotes(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNotes", reflect.TypeOf((*MockRepo)(nil).AddNotes), arg0, arg1)
}

// DescribeNote mocks base method.
func (m *MockRepo) DescribeNote(arg0 context.Context, arg1 uint64) (*note.Note, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeNote", arg0, arg1)
	ret0, _ := ret[0].(*note.Note)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeNote indicates an expected call of DescribeNote.
func (mr *MockRepoMockRecorder) DescribeNote(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeNote", reflect.TypeOf((*MockRepo)(nil).DescribeNote), arg0, arg1)
}

// ListNotes mocks base method.
func (m *MockRepo) ListNotes(arg0 context.Context, arg1, arg2 uint64) ([]note.Note, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNotes", arg0, arg1, arg2)
	ret0, _ := ret[0].([]note.Note)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNotes indicates an expected call of ListNotes.
func (mr *MockRepoMockRecorder) ListNotes(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNotes", reflect.TypeOf((*MockRepo)(nil).ListNotes), arg0, arg1, arg2)
}

// RemoveNote mocks base method.
func (m *MockRepo) RemoveNote(arg0 context.Context, arg1 uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveNote", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveNote indicates an expected call of RemoveNote.
func (mr *MockRepoMockRecorder) RemoveNote(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveNote", reflect.TypeOf((*MockRepo)(nil).RemoveNote), arg0, arg1)
}
