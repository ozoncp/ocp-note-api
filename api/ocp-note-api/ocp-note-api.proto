syntax = "proto3";

import "google/api/annotations.proto";
import "validate/validate.proto";

package ocp.note.api;

option go_package = "github.com/ozoncp/ocp-note-api/pkg/ocp-note-api;ocp_note_api";

service OcpNoteApi {
    // Adds a note to the database, giving it a specific Id.
    rpc CreateNoteV1(CreateNoteV1Request) returns (CreateNoteV1Response) {
        option (google.api.http) = {
            post: "/v1/note"
        };
    }

    // Adds several notes to the database at once, assigning certain Id to them.
    rpc MultiCreateNotesV1(MultiCreateNotesV1Request) returns (MultiCreateNotesV1Response) {
        option (google.api.http) = {
            post: "/v1/notes"
        };
    }

    // Refreshes the data for the specified note.
    rpc UpdateNoteV1(UpdateNoteV1Request) returns (UpdateNoteV1Response) {
        option (google.api.http) = {
            post: "/v1/note"
        };
    }

    // Provides information (UserId, ClassroomId, `DocumentId) about the specified note.
    rpc DescribeNoteV1(DescribeNoteV1Request) returns (DescribeNoteV1Response) {
        option (google.api.http) = {
            get: "/v1/notes/{note_id}"
        };
    }

    // Returns the specified number of notes starting at the specified indentation.
    rpc ListNotesV1(ListNotesV1Request) returns (ListNotesV1Response) {
        option (google.api.http) = {
            get: "/v1/notes"
        };
    }

    // Deletes the specified note.
    rpc RemoveNoteV1(RemoveNoteV1Request) returns (RemoveNoteV1Response) {
        option (google.api.http) = {
            delete: "/v1/notes/{note_id}"
        };
    }
}

message CreateNoteV1Request {
    int32 user_id = 2 [(validate.rules).int32.gt = 0];
    int32 classroom_id = 3 [(validate.rules).int32.gt = 0];
    int32 document_id = 4 [(validate.rules).int32.gt = 0];
}

message CreateNoteV1Response {
    uint64 note_id = 1;
}

message MultiCreateNotesV1Request {
    repeated NewNote notes = 1;
}

message MultiCreateNotesV1Response {
    uint64 number_of_notes_created = 1;
}

message UpdateNoteV1Request {
    Note note = 1;
}

message UpdateNoteV1Response {
    bool found = 1;
}

message DescribeNoteV1Request {
    int64 note_id = 1 [(validate.rules).int64.gt = 0];
}

message DescribeNoteV1Response {
    Note note = 1;
}

message ListNotesV1Request {
    int64 limit = 1 [(validate.rules).int64.gt = 0];
    int64 offset = 2 [(validate.rules).int64.gte = 0];
}

message ListNotesV1Response {
    repeated Note notes = 1;
}

message RemoveNoteV1Request {
    int64 note_id = 1 [(validate.rules).int64.gt = 0];
}

message RemoveNoteV1Response {
    bool found = 1;
}

message Note {
    int64 id = 1 [(validate.rules).int64.gt = 0];
    int32 user_id = 2 [(validate.rules).int32.gt = 0];
    int32 classroom_id = 3 [(validate.rules).int32.gt = 0];
    int32 document_id = 4 [(validate.rules).int32.gt = 0];
}

message NewNote {
    int32 user_id = 1 [(validate.rules).int32.gt = 0];
    int32 classroom_id = 2 [(validate.rules).int32.gt = 0];
    int32 document_id = 3 [(validate.rules).int32.gt = 0];
  }