// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package ocp_note_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OcpNoteApiClient is the client API for OcpNoteApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OcpNoteApiClient interface {
	CreateNoteV1(ctx context.Context, in *CreateNoteV1Request, opts ...grpc.CallOption) (*CreateNoteV1Response, error)
	MultiCreateNotesV1(ctx context.Context, in *MultiCreateNotesV1Request, opts ...grpc.CallOption) (*MultiCreateNotesV1Response, error)
	DescribeNoteV1(ctx context.Context, in *DescribeNoteV1Request, opts ...grpc.CallOption) (*DescribeNoteV1Response, error)
	ListNotesV1(ctx context.Context, in *ListNotesV1Request, opts ...grpc.CallOption) (*ListNotesV1Response, error)
	RemoveNoteV1(ctx context.Context, in *RemoveNoteV1Request, opts ...grpc.CallOption) (*RemoveNoteV1Response, error)
}

type ocpNoteApiClient struct {
	cc grpc.ClientConnInterface
}

func NewOcpNoteApiClient(cc grpc.ClientConnInterface) OcpNoteApiClient {
	return &ocpNoteApiClient{cc}
}

func (c *ocpNoteApiClient) CreateNoteV1(ctx context.Context, in *CreateNoteV1Request, opts ...grpc.CallOption) (*CreateNoteV1Response, error) {
	out := new(CreateNoteV1Response)
	err := c.cc.Invoke(ctx, "/ocp.note.api.OcpNoteApi/CreateNoteV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ocpNoteApiClient) MultiCreateNotesV1(ctx context.Context, in *MultiCreateNotesV1Request, opts ...grpc.CallOption) (*MultiCreateNotesV1Response, error) {
	out := new(MultiCreateNotesV1Response)
	err := c.cc.Invoke(ctx, "/ocp.note.api.OcpNoteApi/MultiCreateNotesV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ocpNoteApiClient) DescribeNoteV1(ctx context.Context, in *DescribeNoteV1Request, opts ...grpc.CallOption) (*DescribeNoteV1Response, error) {
	out := new(DescribeNoteV1Response)
	err := c.cc.Invoke(ctx, "/ocp.note.api.OcpNoteApi/DescribeNoteV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ocpNoteApiClient) ListNotesV1(ctx context.Context, in *ListNotesV1Request, opts ...grpc.CallOption) (*ListNotesV1Response, error) {
	out := new(ListNotesV1Response)
	err := c.cc.Invoke(ctx, "/ocp.note.api.OcpNoteApi/ListNotesV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ocpNoteApiClient) RemoveNoteV1(ctx context.Context, in *RemoveNoteV1Request, opts ...grpc.CallOption) (*RemoveNoteV1Response, error) {
	out := new(RemoveNoteV1Response)
	err := c.cc.Invoke(ctx, "/ocp.note.api.OcpNoteApi/RemoveNoteV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OcpNoteApiServer is the server API for OcpNoteApi service.
// All implementations must embed UnimplementedOcpNoteApiServer
// for forward compatibility
type OcpNoteApiServer interface {
	CreateNoteV1(context.Context, *CreateNoteV1Request) (*CreateNoteV1Response, error)
	MultiCreateNotesV1(context.Context, *MultiCreateNotesV1Request) (*MultiCreateNotesV1Response, error)
	DescribeNoteV1(context.Context, *DescribeNoteV1Request) (*DescribeNoteV1Response, error)
	ListNotesV1(context.Context, *ListNotesV1Request) (*ListNotesV1Response, error)
	RemoveNoteV1(context.Context, *RemoveNoteV1Request) (*RemoveNoteV1Response, error)
	mustEmbedUnimplementedOcpNoteApiServer()
}

// UnimplementedOcpNoteApiServer must be embedded to have forward compatible implementations.
type UnimplementedOcpNoteApiServer struct {
}

func (UnimplementedOcpNoteApiServer) CreateNoteV1(context.Context, *CreateNoteV1Request) (*CreateNoteV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNoteV1 not implemented")
}
func (UnimplementedOcpNoteApiServer) MultiCreateNotesV1(context.Context, *MultiCreateNotesV1Request) (*MultiCreateNotesV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MultiCreateNotesV1 not implemented")
}
func (UnimplementedOcpNoteApiServer) DescribeNoteV1(context.Context, *DescribeNoteV1Request) (*DescribeNoteV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeNoteV1 not implemented")
}
func (UnimplementedOcpNoteApiServer) ListNotesV1(context.Context, *ListNotesV1Request) (*ListNotesV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNotesV1 not implemented")
}
func (UnimplementedOcpNoteApiServer) RemoveNoteV1(context.Context, *RemoveNoteV1Request) (*RemoveNoteV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveNoteV1 not implemented")
}
func (UnimplementedOcpNoteApiServer) mustEmbedUnimplementedOcpNoteApiServer() {}

// UnsafeOcpNoteApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OcpNoteApiServer will
// result in compilation errors.
type UnsafeOcpNoteApiServer interface {
	mustEmbedUnimplementedOcpNoteApiServer()
}

func RegisterOcpNoteApiServer(s grpc.ServiceRegistrar, srv OcpNoteApiServer) {
	s.RegisterService(&OcpNoteApi_ServiceDesc, srv)
}

func _OcpNoteApi_CreateNoteV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNoteV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpNoteApiServer).CreateNoteV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.note.api.OcpNoteApi/CreateNoteV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpNoteApiServer).CreateNoteV1(ctx, req.(*CreateNoteV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _OcpNoteApi_MultiCreateNotesV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiCreateNotesV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpNoteApiServer).MultiCreateNotesV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.note.api.OcpNoteApi/MultiCreateNotesV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpNoteApiServer).MultiCreateNotesV1(ctx, req.(*MultiCreateNotesV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _OcpNoteApi_DescribeNoteV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeNoteV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpNoteApiServer).DescribeNoteV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.note.api.OcpNoteApi/DescribeNoteV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpNoteApiServer).DescribeNoteV1(ctx, req.(*DescribeNoteV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _OcpNoteApi_ListNotesV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNotesV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpNoteApiServer).ListNotesV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.note.api.OcpNoteApi/ListNotesV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpNoteApiServer).ListNotesV1(ctx, req.(*ListNotesV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _OcpNoteApi_RemoveNoteV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveNoteV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpNoteApiServer).RemoveNoteV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.note.api.OcpNoteApi/RemoveNoteV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpNoteApiServer).RemoveNoteV1(ctx, req.(*RemoveNoteV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

// OcpNoteApi_ServiceDesc is the grpc.ServiceDesc for OcpNoteApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OcpNoteApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ocp.note.api.OcpNoteApi",
	HandlerType: (*OcpNoteApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNoteV1",
			Handler:    _OcpNoteApi_CreateNoteV1_Handler,
		},
		{
			MethodName: "MultiCreateNotesV1",
			Handler:    _OcpNoteApi_MultiCreateNotesV1_Handler,
		},
		{
			MethodName: "DescribeNoteV1",
			Handler:    _OcpNoteApi_DescribeNoteV1_Handler,
		},
		{
			MethodName: "ListNotesV1",
			Handler:    _OcpNoteApi_ListNotesV1_Handler,
		},
		{
			MethodName: "RemoveNoteV1",
			Handler:    _OcpNoteApi_RemoveNoteV1_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ocp-note-api.proto",
}
